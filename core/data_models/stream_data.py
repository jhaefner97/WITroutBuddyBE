# generated by datamodel-codegen:
#   filename:  stream_data_in.json
#   timestamp: 2024-07-17T04:05:29+00:00

from __future__ import annotations

from typing import List

from pydantic import BaseModel


class Criteria(BaseModel):
    locationParam: str
    variableParam: str
    parameter: List


class NoteItem(BaseModel):
    value: str
    title: str


class QueryInfo(BaseModel):
    queryURL: str
    criteria: Criteria
    note: List[NoteItem]


class SiteCodeItem(BaseModel):
    value: str
    network: str
    agencyCode: str


class DefaultTimeZone(BaseModel):
    zoneOffset: str
    zoneAbbreviation: str


class DaylightSavingsTimeZone(BaseModel):
    zoneOffset: str
    zoneAbbreviation: str


class TimeZoneInfo(BaseModel):
    defaultTimeZone: DefaultTimeZone
    daylightSavingsTimeZone: DaylightSavingsTimeZone
    siteUsesDaylightSavingsTime: bool


class GeogLocation(BaseModel):
    srs: str
    latitude: float
    longitude: float


class GeoLocation(BaseModel):
    geogLocation: GeogLocation
    localSiteXY: List


class SitePropertyItem(BaseModel):
    value: str
    name: str


class SourceInfo(BaseModel):
    siteName: str
    siteCode: List[SiteCodeItem]
    timeZoneInfo: TimeZoneInfo
    geoLocation: GeoLocation
    note: List
    siteType: List
    siteProperty: List[SitePropertyItem]


class VariableCodeItem(BaseModel):
    value: str
    network: str
    vocabulary: str
    variableID: int
    default: bool


class Unit(BaseModel):
    unitCode: str


class OptionItem(BaseModel):
    name: str
    optionCode: str


class Options(BaseModel):
    option: List[OptionItem]


class Variable(BaseModel):
    variableCode: List[VariableCodeItem]
    variableName: str
    variableDescription: str
    valueType: str
    unit: Unit
    options: Options
    note: List
    noDataValue: float
    variableProperty: List
    oid: str


class ValueItem(BaseModel):
    value: str
    qualifiers: List[str]
    dateTime: str


class QualifierItem(BaseModel):
    qualifierCode: str
    qualifierDescription: str
    qualifierID: int
    network: str
    vocabulary: str


class MethodItem(BaseModel):
    methodDescription: str
    methodID: int


class Value1(BaseModel):
    value: List[ValueItem]
    qualifier: List[QualifierItem]
    qualityControlLevel: List
    method: List[MethodItem]
    source: List
    offset: List
    sample: List
    censorCode: List


class TimeSery(BaseModel):
    sourceInfo: SourceInfo
    variable: Variable
    values: List[Value1]
    name: str


class Value(BaseModel):
    queryInfo: QueryInfo
    timeSeries: List[TimeSery]


class Model(BaseModel):
    name: str
    declaredType: str
    scope: str
    value: Value
    nil: bool
    globalScope: bool
    typeSubstituted: bool
